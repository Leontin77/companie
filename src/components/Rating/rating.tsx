import { useState, useEffect } from "react";
import { useForm, Controller } from "react-hook-form";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import PhoneInput from "react-phone-number-input";
import { isValidPhoneNumber } from "react-phone-number-input";
import { useNavigate } from "react-router-dom";
import "./rating.scss";
import axios from "axios";

const validationSchema = yup.object().shape({
  name: yup.string().required("–ò–º—è –∏ –§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"),
  sum: yup.number().required("–£–∫–∞–∂–∏—Ç–µ —Å—É–º—É–º —É—Ç–µ—Ä—è–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"),
  email: yup
    .string()
    .email("–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã")
    .required("Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
  phone: yup
    .string()
    .test(
      "is-valid-phone",
      "–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
      (value) => {
        if (value) {
          return isValidPhoneNumber(value);
        }
        return true;
      }
    )
    .required("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
});

interface FormData {
  name: string;
  email: string;
  phone: string;
  // sum: number;
}

export const Raiting = () => {
  const navigate = useNavigate();
  const [step, setStep] = useState(1);
  const [openDropDownMenu, setOpenDropDownMenu] = useState(false);
  const [selectedCheckbox1, setSelectedCheckbox1] = useState<any>();
  const [selectedCheckbox2, setSelectedCheckbox2] = useState<any>();
  const [selectedCheckbox3, setSelectedCheckbox3] = useState<any>();

  const [type, setType] = useState("");
  const [duration, setDuration] = useState("");
  const [amount, setAmount] = useState("");
  const [brokerName, setBrokerName] = useState("");
  const [fullName, setFullName] = useState("");
  const [contactNumber, setContactNumber] = useState("");
  const [email, setEmail] = useState("");
  const [lossAmount, setLossAmount] = useState("");
  const [probability, setProbability] = useState(94);
  
  const [lossAmountError, setLossAmountError] = useState('');

  const [amountNumber, setAmountNumber] = useState(0);
  const [duretionNumber, setDurationNumber] = useState(0);
  const {
    control,
    handleSubmit,
    formState: { errors },
  } = useForm<FormData>({
    resolver: yupResolver(validationSchema) as any
  });

  const checkboxOptions = [
    { id: "brokerFraud", label: "–û–±–º–∞–Ω—É–ª –±—Ä–æ–∫–µ—Ä-–º–æ—à–µ–Ω–Ω–∏–∫" },
    { id: "financialPyramid", label: "–ü–æ–ø–∞–ª(–∞) –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–∏—Ä–∞–º–∏–¥—É" },
    { id: "fakeOrg", label: "–û–±–º–∞–Ω —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Ñ–∏–∫—Ç–∏–≤–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏" },
    { id: "cryptoFraud", label: "–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏" },
    {
      id: "bankFraud",
      label: "–û–±–º–∞–Ω –≤ –±–∞–Ω–∫–µ –∏/–∏–ª–∏ –∫—Ä–∞–∂–∞ –¥–µ–Ω–µ–≥ —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã",
    },
    { id: "pyramidScheme", label: "–†–∏—ç–ª—Ç–æ—Ä—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è - –º–æ—à–µ–Ω–Ω–∏–∫" },
    { id: "other", label: "–î—Ä—É–≥–æ–µ" },
  ];

  const checkboxOptionsStep2 = [
    { id: "duration1", label: "–æ—Ç 1 –¥–Ω—è –¥–æ 3 –º–µ—Å—è—Ü–µ–≤", value: 50 },
    { id: "duration2", label: "–æ—Ç 3 –º–µ—Å—è—Ü–µ–≤ –¥–æ 6 –º–µ—Å—è—Ü–µ–≤", value: 120 },
    { id: "duration3", label: "–æ—Ç 6 –º–µ—Å—è—Ü–µ–≤ –¥–æ 1 –≥–æ–¥–∞", value: 280 },
    { id: "duration4", label: "–æ—Ç 1 –≥–æ–¥–∞ –¥–æ 2 –ª–µ—Ç", value: 120 },
    { id: "duration5", label: "–æ—Ç 2 –ª–µ—Ç –¥–æ 3 –ª–µ—Ç", value: 550 },
    { id: "duration6", label: "–±–æ–ª–µ–µ 3 –ª–µ—Ç", value: 1300 },
  ];

  const checkboxOptionsStep3 = [
    { id: "money1", label: "–¥–æ 1000", value: 1000 },
    { id: "money2", label: "–æ—Ç 1000 –¥–æ 5000", value: 5000 },
    { id: "money3", label: "–æ—Ç 5000 –¥–æ 10000", value: 10000 },
    { id: "money1", label: "—Å–≤—ã—à–µ 10000", value: 100000 },
  ];

  // const handleSubmit = () => {
  //   const submissionData = {
  //     fraudType: type,
  //     fraudDuration: duration,
  //     fraudAmount: amount,
  //     brokerName: brokerName,
  //     fullName: fullName,
  //     contactNumber: contactNumber,
  //     email: email,
  //     lossAmount: lossAmount,
  //   };
  //   console.log("submissionData", submissionData);
  //   setType("");
  //   setDuration(0);
  //   setAmount("");
  //   setBrokerName("");
  //   setFullName("");
  //   setContactNumber("");
  //   setEmail("");
  //   setLossAmount(0);
  //   setSelectedCheckbox1(null);
  //   setSelectedCheckbox2(null);
  //   setSelectedCheckbox3(null);
  // };
  let IPData: any = JSON.parse(localStorage?.getItem("IPData"));
  console.log("üöÄ ~ file: rating.tsx:124 ~ onSubmit ~ lossAmount:", lossAmount)
  const onSubmit = () => {
    console.log('@@@@@@', lossAmount);
    if (!lossAmount) {
      setLossAmountError('–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —É—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤');
      return
    }
    const submissionData = {
      fraudType: type,
      fraudDuration: duration,
      fraudAmount: amount,
      brokerName: brokerName,
      fullName: fullName,
      contactNumber: contactNumber,
      email: email,
      lossAmount: lossAmount,
    };
    const message =
      `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${window.location.href}\n\n` +
      "–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: \n" +
      "IP: " +
      IPData?.usersIP +
      " " +
      IPData?.usersCountry +
      " " +
      IPData?.usersCity +
      "\n" +
      `–¢–∏–ø –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞: ${submissionData.fraudType}\n` +
      `–ö–æ–≥–¥–∞ —Å–ª—É—á–∏–ª–æ—Å—å: ${submissionData.fraudDuration}\n` +
      `–ù–∞–∑–≤–∞ –ë—Ä–æ–∫–µ—Ä–∞: ${submissionData.brokerName}\n` +
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${submissionData.contactNumber}\n` +
      `–°—É–º–º–∞ —É—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: ${submissionData.fraudAmount}\n` +
      `–ò–º—è –§–∞–º–∏–ª–∏—è: ${submissionData.fullName}\n` +
      `Email: ${submissionData.email}\n`;
    // `–¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\n` +

    console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", message);
    if (localStorage?.getItem("Id")) {
      window.fbq("init", localStorage?.getItem("Id"));
      window.fbq("track", "Lead");
    }

    axios
      .post(
        "https://api.telegram.org/bot6838927302:AAFQekM_kdasi7J56AA3D6KMB8sVaZS7TZs/sendMessage",
        {
          chat_id: "-1002068894098",
          text: message,
        }
      )
      .then((response: any) => {
        if (localStorage.getItem("Id")) {
          window.fbq("init", localStorage?.getItem("Id"));
          window.fbq("track", "Lead");
          navigate("/thankyou");
        } else {
          navigate("/thankyou");
        }
      })
      .catch((error: any) => console.error(error));
  };

  useEffect(() => {
    setProbability(calculateProbability(amountNumber, duretionNumber));
  }, []);

  const calculateProbability = (
    amountLost: number,
    daysSinceTransfer: number
  ): number => {
    const minProbability = 87;
    const maxProbability = 96;
    const maxDays = 1825;
    const maxAmount = 100000;
    const daysFactor = (maxDays - daysSinceTransfer) / maxDays;
    const amountFactor = amountLost / maxAmount;
    const weightedProbability = (daysFactor + amountFactor) / 2;

    const probabilityRange = maxProbability - minProbability;
    const probability = minProbability + probabilityRange * weightedProbability;

    return Math.min(Math.max(probability, minProbability), maxProbability);
  };

  const [screenWidth, setScreenWidth] = useState(window.innerWidth);

  useEffect(() => {
    const handleResize = () => {
      setScreenWidth(window.innerWidth);
    };
    window.addEventListener("resize", handleResize);
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  const handleCheckboxChange = (id: any) => {
    if (step === 1) {
      setSelectedCheckbox1(id);
    }
    if (step === 2) {
      setSelectedCheckbox2(id);
    }
    if (step === 3) {
      setSelectedCheckbox3(id);
    }
  };

  const nextStep = () => {
    switch (step) {
      case 1:
        type === "" ? setStep(step) : setStep(step + 1);
        break;
      case 2:
        duration === "" ? setStep(step) : setStep(step + 1);
        break;
      case 3:
        amount === "" ? setStep(step) : setStep(step + 1);
        break;
      case 4:
        brokerName === "" ? setStep(step) : setStep(step + 1);
        break;
      case 5:
        setStep(step + 1);
        break;
      case 6: fullName && email && contactNumber ? onSubmit() : setStep(step);
      break;
    }
  };
  console.log("üöÄ ~ file: rating.tsx:250 ~ nextStep ~ fullName && email && contactNumber:", fullName && email && contactNumber)
  // console.log("üöÄ ~ file: rating.tsx:250 ~ nextStep ~ contactNumber:", contactNumber)

  return (
    <section className="chooseType">
      <div className="container">
        <div className="chooseType-content">
          <div className="chooseType-header">
            –ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –º–æ–µ–≥–æ –¥–µ–ª–∞ –≤—Å–µ–≥–æ –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç
          </div>
          <div className="chooseType-checkboxes">
            {step === 1 && (
              <h5>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å</h5>
            )}
            {step === 2 && (
              <h5>–ö–∞–∫ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –∫—Ä–∞–∂–∏ –≤–∞—à–∏—Ö –¥–µ–Ω–µ–≥?</h5>
            )}
            {step === 3 && <h5>–ö–∞–∫—É—é —Å—É–º–º—É –¥–µ–Ω–µ–≥ —É –≤–∞—Å —É–∫—Ä–∞–ª–∏? ($)</h5>}
            {step === 4 && (
              <h5>
                –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–æ–∫–µ—Ä–∞/ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —É–∫—Ä–∞–≤—à–µ–π –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏?
              </h5>
            )}
            {step === 5 && (
              <h5>
                –í–∞—à —Å–ª—É—á–∞–π –∏–º–µ–µ—Ç –≤—Å–µ —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –∏—Å—Ö–æ–¥, –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞
                –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø—Ä–µ–¥–ª–æ–∂–∞—Ç –≤–∞–º –≤—Å–µ
                –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã¬† –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–∞—à–∏—Ö –¥–µ–Ω–µ–≥.
              </h5>
            )}
            {step === 6 && <h5>–•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏!</h5>}
            <form onSubmit={handleSubmit(onSubmit)}>

            {step === 1 && (
              <fieldset>
                {checkboxOptions.map((option, index) => (
                  <div
                    key={option.id}
                    className="checkbox-group"
                    onClick={() => {
                      setType(option.label);
                      handleCheckboxChange(`option${index}`);
                    }}
                  >
                    <div
                      className={
                        selectedCheckbox1 === `option${index}`
                          ? "choosenOption"
                          : "notCheckedOption"
                      }
                    >
                      <input
                        type="checkbox"
                        id={`option${index}`}
                        checked={selectedCheckbox1 === `option${index}`}
                        name="fraudType"
                        onClick={() => setType(option.label)}
                        onChange={() => handleCheckboxChange(`option${index}`)}
                        className={
                          selectedCheckbox1 === `option${index}`
                            ? "choosenOptionInput"
                            : ""
                        }
                      />
                    </div>
                    <label htmlFor={option.id}>{option.label}</label>
                  </div>
                ))}
              </fieldset>
            )}
            {step === 2 && (
              <fieldset>
                {checkboxOptionsStep2.map((option, index) => (
                  <div
                    key={option.id}
                    className="checkbox-group"
                    onClick={() => {
                      setDuration(option.label);
                      handleCheckboxChange(`option${index}`);
                    }}
                  >
                    <div
                      className={
                        selectedCheckbox2 === `option${index}`
                          ? "choosenOption"
                          : "notCheckedOption"
                      }
                    >
                      <input
                        type="checkbox"
                        id={`option${index}`}
                        checked={selectedCheckbox2 === `option${index}`}
                        name="fraudDuration"
                        onClick={() => {
                          setDuration(option.label);
                          setAmountNumber(option.value);
                        }}
                        onChange={() => handleCheckboxChange(`option${index}`)}
                        className={
                          selectedCheckbox2 === `option${index}`
                            ? "choosenOptionInput"
                            : ""
                        }
                      />
                    </div>
                    <label htmlFor={option.id}>{option.label}</label>
                  </div>
                ))}
              </fieldset>
            )}
            {step === 3 && (
              <fieldset>
                {checkboxOptionsStep3.map((option, index) => (
                  <div
                    key={index}
                    className="checkbox-group"
                    onClick={() => {
                      setAmount(option.label);
                      handleCheckboxChange(`option${index}`);
                    }}
                  >
                    <div
                      className={
                        selectedCheckbox3 === `option${index}`
                          ? "choosenOption"
                          : "notCheckedOption"
                      }
                    >
                      <input
                        type="checkbox"
                        id={`option${index}`}
                        checked={selectedCheckbox3 === `option${index}`}
                        name="fraudAmount"
                        onClick={() => {
                          setAmount(option.label);
                          setAmountNumber(option.value);
                        }}
                        onChange={() => handleCheckboxChange(`option${index}`)}
                        className={
                          selectedCheckbox3 === `option${index}`
                            ? "choosenOptionInput"
                            : ""
                        }
                      />
                    </div>
                    <label htmlFor={option.id}>{option.label}</label>
                  </div>
                ))}
              </fieldset>
            )}
            {step === 4 && (
              <fieldset>
                <input
                  className="chooseType-input"
                  type="text"
                  placeholder="–í–∞—à –æ—Ç–≤–µ—Ç"
                  onChange={(e) => setBrokerName(e.target.value)}
                />
              </fieldset>
            )}
            {step === 5 && (
              <h2 className="chooseType-percent">{`–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞: > ${probability.toFixed(
                0
              )}%.`}</h2>
            )}
              {step === 6 && (
                <div className="chooseType-box">
                  <div className="inputWrapper">
                    <Controller
                      name="name"
                      control={control}
                      render={({ field }) => (
                        <input
                          className="chooseType-box-input"
                          placeholder="–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è"
                          onChange={(e) => setFullName(e.target.value)}
                          type="text"
                          id="name"
                          {...field}
                        />
                      )}
                    />
                    {errors.name && (
                      <p className="form-input-error">{errors.name.message}</p>
                    )}
                  </div>
                  {/* <input
                    className="chooseType-box-input"
                    type="text"
                    placeholder="–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è"
                    onChange={(e) => setFullName(e.target.value)}
                  /> */}
                  <div className="inputWrapper">
                    <Controller
                      name="phone"
                      control={control}
                      render={({ field: { value } }) => (
                        <PhoneInput
                          defaultCountry={IPData?.countryCode || "PL"}
                          placeholder="Enter phone number"
                          value={IPData?.phoneCode}
                          onChange={(value) => setContactNumber(value)}
                          className="chooseType-box-input"
                        />
                      )}
                    />
                    {errors.phone && (
                      <p className="form-input-error">{errors.phone.message}</p>
                    )}
                  </div>
                  {/* <input
                    className="chooseType-box-input"
                    type="text"
                    placeholder="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä"
                    onChange={(e) => setContactNumber(e.target.value)}
                  /> */}
                  {/* <input
                    className="chooseType-box-input"
                    type="text"
                    placeholder="Email"
                    onChange={(e) => setEmail(e.target.value)}
                  /> */}
                  <div className="inputWrapper">
                    <Controller
                      name="email"
                      control={control}
                      render={({ field }) => (
                        <input
                          placeholder="Email"
                          className="chooseType-box-input"
                          type="text"
                          id="email"
                          onChange={(e) => setEmail(e.target.value)}
                          {...field}
                        />
                      )}
                    />
                    {errors.email && (
                      <p className="form-input-error">{errors.email.message}</p>
                    )}
                  </div>

                  <div
                    className="chooseType-box-input dropDown"
                    onClick={() => setOpenDropDownMenu(!openDropDownMenu)}
                  >
                    {!lossAmount ? (
                      <span className="dropDown-title">
                        –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
                      </span>
                    ) : (
                      <span>{lossAmount}</span>
                    )}
                    {openDropDownMenu && (
                      <div className="openDropdown">
                        {checkboxOptionsStep3.map((option, index) => (
                          <div
                            className="openDropdown-label"
                            onClick={() => {
                              setLossAmount(option.label);
                              setOpenDropDownMenu(!openDropDownMenu);
                            }}
                          >
                            <span>{option.label}</span>
                          </div>
                        ))}
                      </div>
                    )}
                    {lossAmountError && 
                      <p className="form-input-error">{lossAmountError}</p>
                    }
                  </div>
                </div>
              )}
              <div className="chooseType-buttons">
                {screenWidth > 1024 ? (
                  <button
                    type="button"
                    className={`button withLeftArrow ${
                      step === 1 && "disabled"
                    }`}
                    disabled={step === 1 && true}
                    onClick={() => setStep(step - 1)}
                  >
                    –í–µ—Ä–Ω—É—Ç—å—Å—è
                  </button>
                ) : (
                  <button
                    type="button"
                    className={`button withLeftArrow ${
                      step === 1 && "disabled"
                    }`}
                    disabled={step === 1 && true}
                    onClick={() => setStep(step - 1)}
                  ></button>
                )}
                {screenWidth > 1024 ? (
                  <button
                    type={step === 6 ? "submit" : "button"}
                    className="button withRightArrow"
                    onClick={() => {
                      // if (step !== 6) {
                      console.log('BUTTON');

                        nextStep();
                      // }
                    }}
                  >
                    {step === 6 ? (
                      <span>–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑</span>
                    ) : (
                      <span>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>
                    )}
                  </button>
                ) : (
                  <button
                    type={'submit'}
                    className="button withRightArrow"
                    onClick={() => {
                      console.log('BUTTON');
                      // if (step !== 6) {
                        nextStep();
                      // }
                    }}
                  >
                    {step === 6 ? <span></span> : <span></span>}
                  </button>
                )}
              </div>
            </form>
          </div>
        </div>
      </div>
    </section>
  );
};
